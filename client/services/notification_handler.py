import asyncio
import json
import logging
from datetime import datetime
from zoneinfo import ZoneInfo

import httpx
import aioredis
import os
from aiogram import Bot
from typing import Dict, Any, Optional

from ..config import API_URL

logger = logging.getLogger(__name__)

class NotificationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self, bot: Bot):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot = bot
        self.redis_conn = None
        self.pubsub = None
        
    async def start_listening(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Redis"""
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.redis_conn = await aioredis.from_url("redis://localhost:6379")
        self.pubsub = self.redis_conn.pubsub()
        await self.pubsub.subscribe("notifications")
        
        while True:
            try:
                message = await self.pubsub.get_message(ignore_subscribe_messages=True)
                if message and message["type"] == "message":
                    await self._handle_notification(message["data"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                
    async def _handle_notification(self, data: bytes) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        Args:
            data (bytes): –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        """
        try:
            payload = json.loads(data)
            await self._send_telegram_notification(payload)
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
    async def _send_telegram_notification(self, payload: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        
        Args:
            payload (Dict[str, Any]): –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            async with httpx.AsyncClient() as client:
                logger.info(f"payload = {payload}")
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_type = payload.get("type")
                
                if notification_type == "new_message":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    message_data = payload.get("message", {})
                    user_id = message_data.get("user_id")
                    is_from_admin = message_data.get("is_from_admin")
                    message_text = message_data.get("text", "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    
                    if is_from_admin == 1 and user_id:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É
                        response = await client.get(f"{API_URL}/clients/{user_id}")
                        response.raise_for_status()
                        client_data = response.json()
                        chat_id = client_data.get("telegram_id")
                        
                        if chat_id:
                            await self.bot.send_message(
                                chat_id=chat_id,
                                text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_text}"
                            )
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å chat_id: {chat_id}")
                    elif is_from_admin == 0 and user_id:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (id={user_id}), –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º –±–æ—Ç–µ")
                    else:
                        logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)
                client_id = payload.get("client_id")
                if not client_id:
                    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç client_id –≤ payload")
                    return
                    
                response = await client.get(f"{API_URL}/clients/{client_id}")
                response.raise_for_status()
                chat_id = response.json()["telegram_id"]
                appointment_id = payload.get("appointment_id")
                if appointment_id:
                    response = await client.get(f"{API_URL}/appointments/{appointment_id}")
                    response.raise_for_status()
                    appointment = response.json()
                    response = await client.get(f"{API_URL}/services/{appointment['service_id']}")
                    response.raise_for_status()
                    service = response.json()
                    response = await client.get(
                        f"{API_URL}/clients/search",
                        params={"telegram_id": str(chat_id)}
                    )
                    response.raise_for_status()
                    current_client = response.json()
                    client_timezone = current_client.get('timezone', 'Europe/Moscow')
                    scheduled_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                    local_time = scheduled_time.astimezone(ZoneInfo(client_timezone))
                    message = f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É {service['name']} {local_time.strftime('%d.%m.%Y')} –≤ {local_time.strftime('%H:%M')}"
                else:
                    message = payload.get("text")

                if not message:
                    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ payload")
                    return
                
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=message
                )
            
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è chat_id: {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.redis_conn:
            await self.redis_conn.close() 