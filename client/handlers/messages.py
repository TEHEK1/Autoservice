from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import httpx
from datetime import datetime
import json
from typing import Union

from ..config import API_URL

router = Router()
logger = logging.getLogger(__name__)

class MessageState(StatesGroup):
    waiting_for_text = State()

class MessageCallback:
    def __init__(self, action: str, message_id: int = None):
        self.action = action
        self.message_id = message_id
    
    def pack(self) -> str:
        data = {"a": self.action}
        if self.message_id is not None:
            data["id"] = self.message_id
        return json.dumps(data)
    
    @classmethod
    def unpack(cls, callback_data: str) -> "MessageCallback":
        data = json.loads(callback_data)
        return cls(
            action=data.get("a", ""),
            message_id=data.get("id")
        )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
def get_messages_keyboard(messages_list, client_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for message in messages_list:
        # –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ—á–∏—Ç–∞–Ω–æ/–Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ)
        status = "‚úì" if message.get("is_read") else "üÜï"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ
        message_preview = message.get('text', '')[:20] + ('...' if len(message.get('text', '')) > 20 else '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        created_at = message.get('created_at', '').split('T')[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ö–æ–¥—è—â–µ–µ/–∏—Å—Ö–æ–¥—è—â–µ–µ)
        message_type = "‚¨ÖÔ∏è" if message.get("is_from_admin") == 1 else "‚û°Ô∏è"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {message_type} {message_preview} ({created_at})",
                callback_data=MessageCallback(
                    action="view",
                    message_id=message.get("id")
                ).pack()
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(
            text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
            callback_data=MessageCallback(action="create").pack()
        )
    ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )
    ])
    
    return keyboard

@router.message(Command("messages"))
async def show_messages(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await show_messages_list(message)

async def show_messages_list(message_or_callback: Union[types.Message, CallbackQuery]):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message_or_callback.from_user.id
        client_id = await get_client_id_by_telegram(user_id)
        
        if not client_id:
            text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            if isinstance(message_or_callback, types.Message):
                await message_or_callback.answer(text)
            else:
                await message_or_callback.message.edit_text(text)
            return
        
        async with httpx.AsyncClient() as client:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = await client.get(f"{API_URL}/messages/?user_id={client_id}")
            
            if response.status_code == 200:
                messages = response.json()
                
                if not messages:
                    text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                            callback_data=MessageCallback(action="create").pack()
                        )],
                        [InlineKeyboardButton(
                            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )]
                    ])
                else:
                    text = "üì¨ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:"
                    keyboard = get_messages_keyboard(messages, client_id)
                
                if isinstance(message_or_callback, types.Message):
                    await message_or_callback.answer(text, reply_markup=keyboard)
                else:
                    await message_or_callback.message.edit_text(text, reply_markup=keyboard)
            else:
                error_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
                if isinstance(message_or_callback, types.Message):
                    await message_or_callback.answer(error_text)
                else:
                    await message_or_callback.message.edit_text(error_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(error_text)
        else:
            await message_or_callback.message.edit_text(error_text)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é        
@router.callback_query(F.data == "messages")
async def handle_message_menu(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_messages_list(callback)
        
@router.callback_query(lambda c: c.data.startswith("{"))
async def process_message_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        cb_data = MessageCallback.unpack(callback.data)
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ callback
        if cb_data.action == "view":
            await view_message(callback, cb_data.message_id)
        elif cb_data.action == "create":
            await start_create_message(callback, state)
        elif cb_data.action == "reply":
            await start_reply_message(callback, cb_data.message_id, state)
        elif cb_data.action == "delete":
            await delete_message(callback, cb_data.message_id)
        elif cb_data.action == "back":
            await show_messages_list(callback)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def view_message(callback: CallbackQuery, message_id: int):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        client_id = await get_client_id_by_telegram(user_id)
        
        if not client_id:
            await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
            
        async with httpx.AsyncClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            response = await client.get(f"{API_URL}/messages/{message_id}")
            
            if response.status_code == 200:
                message_data = response.json()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                history_response = await client.get(f"{API_URL}/messages/?user_id={client_id}")
                
                if history_response.status_code == 200:
                    messages_history = history_response.json()
                    
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    messages_history.sort(key=lambda x: x["created_at"])
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
                    history_text = f"üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n\n"
                    
                    for hist_msg in messages_history:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        direction = "‚û°Ô∏è –í—ã:" if hist_msg["is_from_admin"] == 0 else "‚¨ÖÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                        created_at = datetime.fromisoformat(hist_msg["created_at"])
                        date_str = created_at.strftime("%d.%m.%Y %H:%M")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                        msg_text = hist_msg["text"]
                        # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        if hist_msg["id"] == message_id:
                            msg_text = f"‚û§ {msg_text}"
                            
                        history_text += f"{direction} ({date_str})\n{msg_text}\n\n"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="‚Ü©Ô∏è –û—Ç–≤–µ—Ç–∏—Ç—å", 
                            callback_data=MessageCallback(action="reply", message_id=message_id).pack()
                        )],
                        [InlineKeyboardButton(
                            text="‚ùå –£–¥–∞–ª–∏—Ç—å", 
                            callback_data=MessageCallback(action="delete", message_id=message_id).pack()
                        )],
                        [InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
                            callback_data=MessageCallback(action="back").pack()
                        )]
                    ])
                    
                    await callback.message.edit_text(history_text, reply_markup=keyboard)
                    
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –∏ —ç—Ç–æ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                    if message_data["is_read"] == 0 and message_data["is_from_admin"] == 1:
                        await client.put(f"{API_URL}/messages/read/{message_id}")
                else:
                    await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏")
            else:
                await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def start_create_message(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(MessageState.waiting_for_text)

async def start_reply_message(callback: CallbackQuery, message_id: int, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/messages/{message_id}")
            
            if response.status_code == 200:
                message_data = response.json()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await state.update_data(
                    reply_to_id=message_id
                )
                
                await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
                await state.set_state(MessageState.waiting_for_text)
            else:
                await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def delete_message(callback: CallbackQuery, message_id: int):
    """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.delete(f"{API_URL}/messages/{message_id}")
            
            if response.status_code == 200:
                await callback.message.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                await show_messages_list(callback)
            else:
                await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(MessageState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ"""
    try:
        data = await state.get_data()
        from_user_id = await get_client_id_by_telegram(message.from_user.id)
        
        if not from_user_id:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            await state.clear()
            return
        
        message_data = {
            "text": message.text,
            "user_id": from_user_id,
            "is_from_admin": 0,  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            "is_read": 0
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{API_URL}/messages/", json=message_data)
            if response.status_code == 200:
                await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                await show_messages(message)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    finally:
        await state.clear()

async def get_client_id_by_telegram(telegram_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ Telegram ID"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/clients/search", params={"telegram_id": str(telegram_id)})
            if response.status_code == 200:
                client_data = response.json()
                return client_data.get("id")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–ª–∏–µ–Ω—Ç–∞: {response.status_code} - {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    return None 