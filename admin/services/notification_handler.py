import aioredis
import json
import logging
from aiogram import Bot
from datetime import datetime
import httpx
import os
from ..config import API_URL

logger = logging.getLogger(__name__)

class NotificationHandler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.redis = None
        self.pubsub = None

    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            redis_url = os.getenv("REDIS_URL", "redis://redis:6379")
            self.redis = await aioredis.from_url(redis_url)
            self.pubsub = self.redis.pubsub()
            await self.pubsub.subscribe("notifications")
            
            while True:
                message = await self.pubsub.get_message(ignore_subscribe_messages=True)
                if message:
                    await self._handle_notification(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.pubsub:
            await self.pubsub.unsubscribe("notifications")
        if self.redis:
            await self.redis.close()

    async def _handle_notification(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            data = json.loads(message["data"])
            notification_type = data.get("type")
            
            if notification_type == "new_message":
                await self._handle_new_message(data)
            elif notification_type == "appointment_reminder":
                await self._handle_appointment_reminder(data)
            elif notification_type == "appointment_status":
                await self._handle_appointment_status(data)
            elif notification_type == "new_appointment":
                await self._handle_new_appointment(data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _handle_new_message(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = data.get("message", {})
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
            user_id = message.get("user_id")
            is_from_admin = message.get("is_from_admin", 0)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞)
            if user_id and is_from_admin == 0:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                async with httpx.AsyncClient() as client:
                    response = await client.get(f"{API_URL}/clients/{user_id}")
                    if response.status_code == 200:
                        client_data = response.json()
                        client_name = client_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç")
                        
                        text = (
                            f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n\n"
                            f"üë§ –û—Ç: {client_name}\n"
                            f"üìù –¢–µ–∫—Å—Ç: {message.get('text', '')}\n"
                            f"üìÖ –î–∞—Ç–∞: {message.get('created_at', datetime.now().isoformat())}"
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ª–∏—á–Ω–æ)
                        admin_chat_id = 580866264  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
                        
                        await self.bot.send_message(chat_id=admin_chat_id, text=text)
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_name}")
            else:
                logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_appointment_reminder(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        try:
            appointment = data.get("appointment", {})
            user_id = appointment.get("client_id")
            
            if user_id:
                scheduled_time = datetime.fromisoformat(appointment.get("scheduled_time"))
                
                text = (
                    f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {scheduled_time.strftime('%d.%m.%Y')}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {scheduled_time.strftime('%H:%M')}\n"
                    f"üîß –£—Å–ª—É–≥–∞: {appointment.get('service_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {appointment.get('service_price', 0)} —Ä—É–±."
                )
                
                await self.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏: {e}")

    async def _handle_appointment_status(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
        try:
            appointment = data.get("appointment", {})
            user_id = appointment.get("client_id")
            status = appointment.get("status")
            
            if user_id and status:
                status_text = {
                    "confirmed": "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
                    "cancelled": "‚ùå –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    "completed": "‚úîÔ∏è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                }.get(status, status)
                
                text = (
                    f"üìù –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {appointment.get('scheduled_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üîß –£—Å–ª—É–≥–∞: {appointment.get('service_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞')}\n"
                    f"üìä –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_text}"
                )
                
                await self.bot.send_message(chat_id=user_id, text=text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏: {e}")
            
    async def _handle_new_appointment(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        try:
            appointment = data.get("appointment", {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            async with httpx.AsyncClient() as client:
                client_response = await client.get(f"{API_URL}/clients/{appointment.get('client_id')}")
                service_response = await client.get(f"{API_URL}/services/{appointment.get('service_id')}")
                
                client_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                service_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                if client_response.status_code == 200:
                    client_data = client_response.json()
                    client_name = client_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                if service_response.status_code == 200:
                    service_data = service_response.json()
                    service_name = service_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                scheduled_time = datetime.fromisoformat(appointment.get("scheduled_time").replace('Z', '+00:00'))
                formatted_date = scheduled_time.strftime("%d.%m.%Y")
                formatted_time = scheduled_time.strftime("%H:%M")
                
                text = (
                    f"üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_name}\n"
                    f"üîß –£—Å–ª—É–≥–∞: {service_name}\n"
                    f"üöó –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ: {appointment.get('car_model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {formatted_time}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get('status', 'pending')}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data=f"appointment_confirm_{appointment.get('id')}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"appointment_reject_{appointment.get('id')}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏",
                            callback_data=f"appointment_view_{appointment.get('id')}"
                        )
                    ]
                ])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                admin_chat_id = 580866264  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
                await self.bot.send_message(
                    chat_id=admin_chat_id,
                    text=text,
                    reply_markup=keyboard
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_name}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: {e}") 