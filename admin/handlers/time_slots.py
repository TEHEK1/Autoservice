from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
import httpx
import logging
from datetime import datetime, timedelta
import calendar
from typing import List, Dict, Optional
from zoneinfo import ZoneInfo

from ..config import API_URL
from .profile import get_admin_timezone

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
class CreateWorkingPeriodState(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()
    waiting_for_duration = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
class DeleteWorkingPeriodState(StatesGroup):
    waiting_for_confirmation = State()

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
class WorkingPeriodCallback(CallbackData, prefix="working_period"):
    id: int
    action: str

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
class ViewSlotsCallback(CallbackData, prefix="view_slots"):
    date: str

@router.message(Command("time_slots"))
async def command_time_slots(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /time_slots"""
    await show_time_slots_menu(message)

@router.callback_query(F.data == "time_slots")
async def callback_time_slots(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏'"""
    await show_time_slots_menu(callback.message)
    await callback.answer()

async def show_time_slots_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤", callback_data="working_periods")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤", callback_data="view_time_slots")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(
        "üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "working_periods")
async def show_working_periods(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods")
            response.raise_for_status()
            periods = response.json()
            
            if not periods:
                # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∏—Ö
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥", callback_data="create_working_period")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="time_slots")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                await callback.message.answer("‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤", reply_markup=keyboard)
                await callback.answer()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–±–æ—á–∏–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏
            message_text = "üìÖ –†–∞–±–æ—á–∏–µ –ø–µ—Ä–∏–æ–¥—ã:\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            keyboard = []
            
            for period in periods:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                start_date = datetime.fromisoformat(period['start_date'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                end_date = datetime.fromisoformat(period['end_date'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                start_date_local = start_date.astimezone(ZoneInfo(admin_timezone))
                end_date_local = end_date.astimezone(ZoneInfo(admin_timezone))
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                start_date_formatted = start_date_local.strftime("%d.%m.%Y")
                end_date_formatted = end_date_local.strftime("%d.%m.%Y")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                start_time_parts = period['start_time'].split(':')
                end_time_parts = period['end_time'].split(':')
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã datetime —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                today_utc = datetime.now(ZoneInfo("UTC")).replace(hour=int(start_time_parts[0]), minute=int(start_time_parts[1]), second=0, microsecond=0)
                today_utc_end = datetime.now(ZoneInfo("UTC")).replace(hour=int(end_time_parts[0]), minute=int(end_time_parts[1]), second=0, microsecond=0)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
                today_local = today_utc.astimezone(ZoneInfo(admin_timezone))
                today_local_end = today_utc_end.astimezone(ZoneInfo(admin_timezone))
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                start_time_formatted = today_local.strftime("%H:%M")
                end_time_formatted = today_local_end.strftime("%H:%M")
                
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if period['is_active'] == 1 else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                message_text += f"‚Ä¢ {start_date_formatted} - {end_date_formatted}: {start_time_formatted}-{end_time_formatted}, {period['slot_duration']} –º–∏–Ω. {status}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚úèÔ∏è {start_date_formatted} - {end_date_formatted}",
                        callback_data=WorkingPeriodCallback(id=period['id'], action="edit").pack()
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard.extend([
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥", callback_data="create_working_period")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="time_slots")]
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.answer(message_text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    await callback.answer()

@router.callback_query(F.data == "view_time_slots")
async def view_time_slots_dates(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_timezone = get_admin_timezone(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    now = datetime.now(ZoneInfo(admin_timezone))
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
    keyboard = []
    for i in range(7):
        date = now + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        display_date = date.strftime("%d.%m.%Y (%a)")
        
        keyboard.append([
            InlineKeyboardButton(
                text=display_date,
                callback_data=ViewSlotsCallback(date=date_str).pack()
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="time_slots")])
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ—Ç–æ–≤:", reply_markup=markup)
    
    await callback.answer()

@router.callback_query(ViewSlotsCallback.filter())
async def view_slots_for_date(callback: CallbackQuery, callback_data: ViewSlotsCallback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        selected_date = callback_data.date
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(
                f"{API_URL}/working_periods/time_slots",
                params={"date": selected_date}
            )
            response.raise_for_status()
            slots = response.json()
            
            if not slots:
                # –ï—Å–ª–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="view_time_slots")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                await callback.message.answer("‚ùå –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É", reply_markup=keyboard)
                await callback.answer()
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            display_date = datetime.strptime(selected_date, "%Y-%m-%d").strftime("%d.%m.%Y")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ—Ç–æ–≤
            message_text = f"üìÖ –°–ª–æ—Ç—ã –Ω–∞ {display_date}:\n\n"
            
            for slot in slots:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                start_time_utc = datetime.fromisoformat(slot['start_time'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                end_time_utc = datetime.fromisoformat(slot['end_time'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                start_time_local = start_time_utc.astimezone(ZoneInfo(admin_timezone))
                end_time_local = end_time_utc.astimezone(ZoneInfo(admin_timezone))
                
                start_time = start_time_local.strftime("%H:%M")
                end_time = end_time_local.strftime("%H:%M")
                
                time_range = f"{start_time} - {end_time}"
                status = "üü¢ –°–≤–æ–±–æ–¥–µ–Ω" if slot['is_available'] else "üî¥ –ó–∞–Ω—è—Ç"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text += f"‚Ä¢ {time_range}: {status}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="view_time_slots")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            await callback.message.answer(message_text, reply_markup=markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {callback_data.date}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤")
    
    await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "edit"))
async def edit_working_period(callback: CallbackQuery, callback_data: WorkingPeriodCallback):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        period_id = callback_data.id
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            period = response.json()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            start_date = datetime.fromisoformat(period['start_date'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
            end_date = datetime.fromisoformat(period['end_date'].replace('Z', '+00:00')).replace(tzinfo=ZoneInfo("UTC"))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            start_date_local = start_date.astimezone(ZoneInfo(admin_timezone))
            end_date_local = end_date.astimezone(ZoneInfo(admin_timezone))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            start_date_formatted = start_date_local.strftime("%d.%m.%Y")
            end_date_formatted = end_date_local.strftime("%d.%m.%Y")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            start_time_parts = period['start_time'].split(':')
            end_time_parts = period['end_time'].split(':')
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã datetime —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            today_utc = datetime.now(ZoneInfo("UTC")).replace(hour=int(start_time_parts[0]), minute=int(start_time_parts[1]), second=0, microsecond=0)
            today_utc_end = datetime.now(ZoneInfo("UTC")).replace(hour=int(end_time_parts[0]), minute=int(end_time_parts[1]), second=0, microsecond=0)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è
            today_local = today_utc.astimezone(ZoneInfo(admin_timezone))
            today_local_end = today_utc_end.astimezone(ZoneInfo(admin_timezone))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            start_time_formatted = today_local.strftime("%H:%M")
            end_time_formatted = today_local_end.strftime("%H:%M")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–∏–æ–¥–µ
            message_text = f"üìÖ –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥:\n\n"
            message_text += f"–ù–∞—á–∞–ª–æ: {start_date_formatted}\n"
            message_text += f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date_formatted}\n"
            message_text += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {start_time_formatted} - {end_time_formatted}\n"
            message_text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞: {period['slot_duration']} –º–∏–Ω.\n"
            message_text += f"–°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if period['is_active'] == 1 else 'üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã", callback_data=WorkingPeriodCallback(id=period_id, action="edit_dates").pack())],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data=WorkingPeriodCallback(id=period_id, action="edit_times").pack())],
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞", callback_data=WorkingPeriodCallback(id=period_id, action="edit_duration").pack())],
                [
                    InlineKeyboardButton(
                        text="üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if period['is_active'] == 0 else "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                        callback_data=WorkingPeriodCallback(id=period_id, action="toggle_active").pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                        callback_data=WorkingPeriodCallback(id=period_id, action="delete").pack()
                    )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="working_periods"),
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ])
            
            await callback.message.edit_text(message_text, reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ")
        await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "toggle_active"))
async def toggle_active_period(callback: CallbackQuery, callback_data: WorkingPeriodCallback):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        period_id = callback_data.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–∏–æ–¥–∞
        async with httpx.AsyncClient(timeout=30.0) as client:
            get_response = await client.get(f"{API_URL}/working_periods/{period_id}")
            get_response.raise_for_status()
            period = get_response.json()
            
            # –ú–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é
            new_active = 0 if period['is_active'] == 1 else 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            update_response = await client.patch(
                f"{API_URL}/working_periods/{period_id}",
                json={"is_active": new_active}
            )
            update_response.raise_for_status()
            
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_active == 1 else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            await callback.message.answer(f"‚úÖ –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ {status_text}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–µ—Ä–∏–æ–¥–æ–≤
            await show_working_periods(callback)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    
    await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "delete"))
async def delete_working_period(callback: CallbackQuery, callback_data: WorkingPeriodCallback, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    period_id = callback_data.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            period = response.json()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            start_date = datetime.fromisoformat(period['start_date'].replace('Z', '+00:00')).strftime("%d.%m.%Y")
            end_date = datetime.fromisoformat(period['end_date'].replace('Z', '+00:00')).strftime("%d.%m.%Y")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(period_id=period_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_period"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=WorkingPeriodCallback(id=period_id, action="edit").pack())
                ]
            ])
            
            await callback.message.answer(
                f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}?",
                reply_markup=keyboard
            )
            
            await state.set_state(DeleteWorkingPeriodState.waiting_for_confirmation)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ {period_id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ")
    
    await callback.answer()

@router.callback_query(F.data == "confirm_delete_period", DeleteWorkingPeriodState.waiting_for_confirmation)
async def confirm_delete_period(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    data = await state.get_data()
    period_id = data['period_id']
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.delete(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            
            await callback.message.answer("‚úÖ –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–µ—Ä–∏–æ–¥–æ–≤
            await show_working_periods(callback)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ {period_id}: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞")
    
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "create_working_period")
async def create_working_period(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    await callback.message.answer(
        "üìÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    await state.set_state(CreateWorkingPeriodState.waiting_for_start_date)
    await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "edit_dates"))
async def edit_period_dates(callback: CallbackQuery, callback_data: WorkingPeriodCallback, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        period_id = callback_data.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            period = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–∏–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(period_id=period_id, original_period=period)
        
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(CreateWorkingPeriodState.waiting_for_start_date)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ")
    
    await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "edit_times"))
async def edit_period_times(callback: CallbackQuery, callback_data: WorkingPeriodCallback, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    try:
        period_id = callback_data.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            period = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            period_id=period_id, 
            original_period=period,
            start_date=period["start_date"],
            end_date=period["end_date"]
        )
        
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        await state.set_state(CreateWorkingPeriodState.waiting_for_start_time)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ")
    
    await callback.answer()

@router.callback_query(WorkingPeriodCallback.filter(F.action == "edit_duration"))
async def edit_period_duration(callback: CallbackQuery, callback_data: WorkingPeriodCallback, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞"""
    try:
        period_id = callback_data.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(f"{API_URL}/working_periods/{period_id}")
            response.raise_for_status()
            period = response.json()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            period_id=period_id, 
            original_period=period,
            start_date=period["start_date"],
            end_date=period["end_date"],
            start_time=period["start_time"],
            end_time=period["end_time"]
        )
        
        await callback.message.answer(f"–¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞: {period['slot_duration']} –º–∏–Ω.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 15 –¥–æ 240):")
        await state.set_state(CreateWorkingPeriodState.waiting_for_duration)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—á–µ–º –ø–µ—Ä–∏–æ–¥–µ")
    
    await callback.answer()

@router.message(CreateWorkingPeriodState.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(message.from_user.id)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        local_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è 00:00:00
        local_date = local_date.replace(hour=0, minute=0, second=0, microsecond=0)
        local_date = local_date.replace(tzinfo=ZoneInfo(admin_timezone))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        utc_date = local_date.astimezone(ZoneInfo("UTC"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ UTC
        await state.update_data(start_date=utc_date.isoformat())
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        await state.set_state(CreateWorkingPeriodState.waiting_for_end_date)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        
@router.message(CreateWorkingPeriodState.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(message.from_user.id)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        local_end_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—Ä–µ–º—è 23:59:59
        local_end_date = local_end_date.replace(hour=23, minute=59, second=59, microsecond=0)
        local_end_date = local_end_date.replace(tzinfo=ZoneInfo(admin_timezone))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        utc_end_date = local_end_date.astimezone(ZoneInfo("UTC"))
        
        data = await state.get_data()
        start_date = datetime.fromisoformat(data['start_date'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π
        if utc_end_date.date() < start_date.date():
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
        
        await state.update_data(end_date=utc_end_date.isoformat())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if 'period_id' in data and 'original_period' in data:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            period_id = data['period_id']
            original_period = data['original_period']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
            update_data = {
                "start_date": data['start_date'],
                "end_date": utc_end_date.isoformat(),
                "start_time": original_period['start_time'],
                "end_time": original_period['end_time'],
                "slot_duration": original_period['slot_duration']
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.patch(
                    f"{API_URL}/working_periods/{period_id}",
                    json=update_data
                )
                response.raise_for_status()
                
                await message.answer("‚úÖ –î–∞—Ç—ã —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data="working_periods")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                await state.clear()
        else:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            await state.set_state(CreateWorkingPeriodState.waiting_for_start_time)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateWorkingPeriodState.waiting_for_start_time)
async def process_start_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_parts = message.text.strip().split(':')
        if len(time_parts) != 2:
            raise ValueError("Invalid time format")
        
        start_hour, start_minute = map(int, time_parts)
        if not (0 <= start_hour < 24 and 0 <= start_minute < 60):
            raise ValueError("Invalid time values")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç datetime –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –º–µ—Å—Ç–Ω–æ–≥–æ –≤ UTC
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –±–∞–∑—É –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        local_time = datetime.now(ZoneInfo(admin_timezone)).replace(
            hour=start_hour, 
            minute=start_minute, 
            second=0, 
            microsecond=0
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        utc_time = local_time.astimezone(ZoneInfo("UTC"))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        utc_time_str = utc_time.strftime("%H:%M")
        
        await state.update_data(start_time=utc_time_str)
        
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
        await state.set_state(CreateWorkingPeriodState.waiting_for_end_time)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")

@router.message(CreateWorkingPeriodState.waiting_for_end_time)
async def process_end_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_timezone = get_admin_timezone(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_parts = message.text.strip().split(':')
        if len(time_parts) != 2:
            raise ValueError("Invalid time format")
        
        end_hour, end_minute = map(int, time_parts)
        if not (0 <= end_hour < 24 and 0 <= end_minute < 60):
            raise ValueError("Invalid time values")
        
        data = await state.get_data()
        start_time = data['start_time']
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        # –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –æ–±–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫ –æ–¥–Ω–æ–π –¥–∞—Ç–µ –≤ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        today_local = datetime.now(ZoneInfo(admin_timezone)).replace(
            hour=0, minute=0, second=0, microsecond=0
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º start_time –∏–∑ UTC –≤ –æ–±—ä–µ–∫—Ç datetime –≤ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        start_hour_utc, start_minute_utc = map(int, start_time.split(':'))
        start_time_utc = datetime.now(ZoneInfo("UTC")).replace(
            hour=start_hour_utc, minute=start_minute_utc, second=0, microsecond=0
        )
        start_time_local = start_time_utc.astimezone(ZoneInfo(admin_timezone))
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ end_time –≤ –º–µ—Å—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        end_time_local = today_local.replace(hour=end_hour, minute=end_minute)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ
        if end_time_local.time() <= start_time_local.time():
            await message.answer("‚ùå –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º end_time –∏–∑ –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC
        end_time_with_tz = datetime.now(ZoneInfo(admin_timezone)).replace(
            hour=end_hour, minute=end_minute, second=0, microsecond=0
        )
        end_time_utc = end_time_with_tz.astimezone(ZoneInfo("UTC"))
        end_time_utc_str = end_time_utc.strftime("%H:%M")
        
        await state.update_data(end_time=end_time_utc_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if 'period_id' in data and 'slot_duration' in data.get('original_period', {}):
            # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
            period_id = data['period_id']
            update_data = {
                "start_time": data['start_time'],
                "end_time": end_time_utc_str
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.patch(
                    f"{API_URL}/working_periods/{period_id}",
                    json=update_data
                )
                response.raise_for_status()
                
                await message.answer("‚úÖ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data="working_periods")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
                await state.clear()
        else:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60):"
            )
            await state.set_state(CreateWorkingPeriodState.waiting_for_duration)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(CreateWorkingPeriodState.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞"""
    try:
        duration = int(message.text.strip())
        
        if duration < 15 or duration > 240:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 240 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
            return
        
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if 'period_id' in data:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period_id = data['period_id']
            update_data = {
                "slot_duration": duration
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if 'start_date' in data:
                update_data["start_date"] = data['start_date']
            if 'end_date' in data:
                update_data["end_date"] = data['end_date']
            if 'start_time' in data:
                update_data["start_time"] = data['start_time']
            if 'end_time' in data:
                update_data["end_time"] = data['end_time']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.patch(
                    f"{API_URL}/working_periods/{period_id}",
                    json=update_data
                )
                response.raise_for_status()
                
                await message.answer("‚úÖ –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data="working_periods")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{API_URL}/working_periods",
                    json={
                        "start_date": data['start_date'],
                        "end_date": data['end_date'],
                        "start_time": data['start_time'],
                        "end_time": data['end_time'],
                        "slot_duration": duration,
                        "is_active": 1
                    }
                )
                response.raise_for_status()
                
                await message.answer("‚úÖ –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—á–∏–µ –ø–µ—Ä–∏–æ–¥—ã", callback_data="working_periods")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear() 