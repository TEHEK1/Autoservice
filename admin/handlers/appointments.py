from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
import httpx
import logging
from datetime import datetime

from aiogram.fsm.state import StatesGroup, State

from ..config import API_URL
from . import clients, services

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–µ–π
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–µ–π
class EditAppointmentState(StatesGroup):
    waiting_for_value = State()

class CreateAppointmentState(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_client = State()
    waiting_for_service = State()

class DeleteAppointmentState(StatesGroup):
    waiting_for_confirmation = State()

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–µ–π
class AppointmentCallback(CallbackData, prefix="appointment"):
    id: int
    action: str

class ViewClientCallback(CallbackData, prefix="view_client"):
    appointment_id: int

class SelectClientCallback(CallbackData, prefix="select_client"):
    id: int

class SelectServiceCallback(CallbackData, prefix="select_service"):
    id: int

class EditAppointmentCallback(CallbackData, prefix="appointment"):
    id: int
    field: str

class EditAppointmentKeyCallback(CallbackData, prefix="appointment"):
    id: int
    key: str

class ClientCallback(CallbackData, prefix="client"):
    id: int

class ServiceCallback(CallbackData, prefix="service"):
    id: int

@router.message(Command("appointments"))
async def command_appointments(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
    try:
        async with httpx.AsyncClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            response = await client.get(f"{API_URL}/appointments")
            response.raise_for_status()
            appointments = response.json()
            
            if not appointments:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="create_appointment")]
                ])
                await message.answer("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=keyboard)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            buttons = []
            for appointment in appointments:
                try:
                    if not appointment.get('client_id'):
                        logger.warning(f"–£ –∑–∞–ø–∏—Å–∏ {appointment['id']} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç client_id")
                        continue
                        
                    client_response = await client.get(f"{API_URL}/clients/{appointment['client_id']}")
                    if client_response.status_code != 200:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {appointment['client_id']}: {client_response.status_code}")
                        continue
                        
                    client_data = client_response.json()
                    if not client_data:
                        logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {appointment['client_id']}")
                        continue
                    
                    scheduled_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
                    formatted_time = scheduled_time.strftime("%d.%m.%Y %H:%M")
                    
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"{client_data['name']} - {formatted_time}",
                            callback_data=AppointmentCallback(id=appointment['id'], action="view").pack()
                        )
                    ])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ {appointment.get('client_id', 'unknown')}: {e}")
                    continue
            
            if not buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="create_appointment")]
                ])
                await message.answer("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=keyboard)
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.extend([
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="create_appointment")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer("üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π")

@router.callback_query(lambda c: c.data == "create_appointment")
async def process_create_appointment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    await state.set_state(CreateAppointmentState.waiting_for_date)
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.message(CreateAppointmentState.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        date = datetime.strptime(message.text, "%d.%m.%Y")
        await state.update_data(date=date)
        await state.set_state(CreateAppointmentState.waiting_for_time)
        await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.message(CreateAppointmentState.waiting_for_time)
async def process_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time = datetime.strptime(message.text, "%H:%M")
        data = await state.get_data()
        date = data["date"]
        scheduled_time = datetime.combine(date.date(), time.time())
        await state.update_data(scheduled_time=scheduled_time)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/clients")
            clients = response.json()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"{client['name']} ({client['phone_number']})",
                    callback_data=SelectClientCallback(id=client["id"]).pack()
                )] for client in clients
            ])
            
            await state.set_state(CreateAppointmentState.waiting_for_client)
            await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")

@router.callback_query(SelectClientCallback.filter(), CreateAppointmentState.waiting_for_client)
async def process_client_selection(callback: CallbackQuery, callback_data: SelectClientCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    await state.update_data(client_id=callback_data.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{API_URL}/services")
        services = response.json()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{service['name']} - {service['price']}‚ÇΩ",
                callback_data=SelectServiceCallback(id=service["id"]).pack()
            )] for service in services
        ])
        
        await state.set_state(CreateAppointmentState.waiting_for_service)
        await callback.message.answer("üîß –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)

@router.callback_query(SelectServiceCallback.filter(), CreateAppointmentState.waiting_for_service)
async def process_service_selection(callback: CallbackQuery, callback_data: SelectServiceCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    async with httpx.AsyncClient() as client:
        appointment_data = {
            "client_id": data["client_id"],
            "service_id": callback_data.id,
            "scheduled_time": data["scheduled_time"].isoformat(),
            "status": "pending",
            "car_model": None
        }
        
        response = await client.post(f"{API_URL}/appointments", json=appointment_data)
        if response.status_code == 200:
            await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            await command_appointments(callback.message)
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
    
    await state.clear()

@router.callback_query(lambda c: c.data == "delete_appointment")
async def process_delete_appointment_callback(callback: types.CallbackQuery):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_URL}/appointments")
            response.raise_for_status()
            appointments = response.json()

            if not appointments:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{a.get('date', '–ù–µ—Ç –¥–∞—Ç—ã')} {a.get('time', '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏')} ‚Äî {a.get('client_name', '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞')}",
                            callback_data=AppointmentCallback(id=a['id'], action="delete").pack()
                        )
                    ] for a in appointments
                ]
            )

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        except httpx.RequestError as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
    
    await callback.answer()

@router.callback_query(AppointmentCallback.filter(F.action == "view"))
async def process_appointment_selection(callback: CallbackQuery, callback_data: AppointmentCallback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏"""
    try:
        appointment_id = callback_data.id
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ {appointment_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        message_text, keyboard = await get_appointment_info(appointment_id)
        await callback.message.edit_text(message_text, reply_markup=keyboard)
        await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏", show_alert=True)

@router.callback_query(AppointmentCallback.filter(F.action.in_(["edit_date", "edit_time", "edit_service", "edit_status", "edit_car", "delete"])))
async def process_edit_appointment(callback: types.CallbackQuery, callback_data: AppointmentCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    appointment_id = callback_data.id
    action = callback_data.action
    
    if action == "edit_service":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/services")
            response.raise_for_status()
            services = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥: {services}")
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{service['name']} - {service['price']}‚ÇΩ",
                            callback_data=SelectServiceCallback(id=service['id']).pack()
                        )
                    ] for service in services
                ]
            )
            
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:", reply_markup=keyboard)
            await state.set_state(EditAppointmentState.waiting_for_value)
            await state.update_data(appointment_id=appointment_id, field="service")
    elif action == "edit_date":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="date")
    elif action == "edit_time":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="time")
    elif action == "edit_status":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (pending, confirmed, completed, cancelled):")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="status")
    elif action == "edit_car":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="car_model")
    elif action == "delete":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=AppointmentCallback(id=appointment_id, action="confirm_delete").pack()
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=AppointmentCallback(id=appointment_id, action="view").pack()
                    )
                ]
            ]
        )
        await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?", reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(SelectServiceCallback.filter(), EditAppointmentState.waiting_for_value)
async def process_service_selection(callback: types.CallbackQuery, callback_data: SelectServiceCallback, state: FSMContext):
    data = await state.get_data()
    appointment_id = data['appointment_id']
    service_id = callback_data.id
    
    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏: GET {API_URL}/services/{service_id}")
            service_response = await client.get(f"{API_URL}/services/{service_id}")
            service_response.raise_for_status()
            service = service_response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: GET {API_URL}/appointments/{appointment_id}")
            appointment_response = await client.get(f"{API_URL}/appointments/{appointment_id}")
            appointment_response.raise_for_status()
            appointment = appointment_response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {appointment}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —É—Å–ª—É–≥–æ–π
            update_data = {
                "service_id": service_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ callback_data
            }
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: PATCH {API_URL}/appointments/{appointment_id} —Å –¥–∞–Ω–Ω—ã–º–∏ {update_data}")
            response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
            response.raise_for_status()
            
            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
            await state.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            message_text, keyboard = await get_appointment_info(appointment_id)
            await callback.message.edit_text(message_text, reply_markup=keyboard)
            
    except httpx.HTTPError as e:
        if e.response and e.response.status_code == 404:
            await callback.message.edit_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}")
    
    await callback.answer()

@router.callback_query(ViewClientCallback.filter())
async def view_appointment_client(callback: CallbackQuery, callback_data: ViewClientCallback):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∑–∞–ø–∏—Å–∏"""
    try:
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            response = await http_client.get(f"{API_URL}/appointments/{callback_data.appointment_id}")
            response.raise_for_status()
            appointment = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_response = await http_client.get(f"{API_URL}/clients/{appointment['client_id']}")
            client_response.raise_for_status()
            client = client_response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
            message = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ\n\n"
                f"–ò–º—è: {client['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {client['phone_number']}\n"
                f"Telegram ID: {client.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏",
                            callback_data=AppointmentCallback(id=callback_data.appointment_id, action="view").pack()
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]
                ]
            )
            
            await callback.message.edit_text(message, reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ", show_alert=True)

@router.callback_query(lambda c: c.data == "back_to_appointments")
async def back_to_appointments(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π"""
    await command_appointments(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "appointments")
async def appointments_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
    await command_appointments(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "clients")
async def clients_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await clients.command_clients(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "services")
async def services_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
    await services.command_services(callback.message)
    await callback.answer()

@router.callback_query(AppointmentCallback.filter(F.action == "confirm_delete"))
async def process_confirm_delete(callback: types.CallbackQuery, callback_data: AppointmentCallback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        appointment_id = callback_data.id
        async with httpx.AsyncClient() as client:
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            response = await client.delete(f"{API_URL}/appointments/{appointment_id}")
            response.raise_for_status()
            
            await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            await command_appointments(callback.message)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
    
    await callback.answer()

async def get_appointment_info(appointment_id: int) -> tuple[str, InlineKeyboardMarkup]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏"""
    try:
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            response = await http_client.get(f"{API_URL}/appointments/{appointment_id}")
            response.raise_for_status()
            appointment = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {appointment}")
            
            if not appointment:
                raise ValueError(f"–ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_info = "üë§ –ö–ª–∏–µ–Ω—Ç: –ù–µ –Ω–∞–π–¥–µ–Ω\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: –ù–µ —É–∫–∞–∑–∞–Ω\n"
            if appointment.get('client_id'):
                try:
                    client_response = await http_client.get(f"{API_URL}/clients/{appointment['client_id']}")
                    if client_response.status_code == 200:
                        client_data = client_response.json()
                        if client_data:
                            client_info = (
                                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_data['name']}\n"
                                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_data['phone_number']}\n"
                            )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ {appointment['client_id']}: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            service_info = "üîß –£—Å–ª—É–≥–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n"
            if appointment.get('service_id'):
                try:
                    service_response = await http_client.get(f"{API_URL}/services/{appointment['service_id']}")
                    if service_response.status_code == 200:
                        service = service_response.json()
                        if service:
                            service_info = f"üîß –£—Å–ª—É–≥–∞: {service['name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']} —Ä—É–±.\n"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ {appointment['service_id']}: {e}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            scheduled_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
            formatted_time = scheduled_time.strftime("%d.%m.%Y %H:%M")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = [
                [
                    InlineKeyboardButton(
                        text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
                        callback_data=AppointmentCallback(action="edit_date", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                        callback_data=AppointmentCallback(action="edit_time", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É",
                        callback_data=AppointmentCallback(action="edit_service", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="üöó –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ",
                        callback_data=AppointmentCallback(action="edit_car", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=AppointmentCallback(action="edit_status", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞",
                        callback_data=ViewClientCallback(appointment_id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=AppointmentCallback(action="delete", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_appointments"),
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
            message = (
                f"üìù –ó–∞–ø–∏—Å—å #{appointment_id}\n\n"
                f"{client_info}"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {appointment.get('car_model', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"{service_info}"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_time}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            )
            
            return message, keyboard
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏: {e}")
        raise

@router.message(EditAppointmentState.waiting_for_value)
async def process_edit_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    try:
        data = await state.get_data()
        appointment_id = data['appointment_id']
        field = data['field']
        
        if field == "date":
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                date_obj = datetime.strptime(message.text.strip(), "%d.%m.%Y")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/appointments/{appointment_id}")
                response.raise_for_status()
                appointment = response.json()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Ä–µ–º—è
                current_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
                new_datetime = datetime.combine(date_obj.date(), current_time.time())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                update_data = {
                    "scheduled_time": new_datetime.isoformat()
                }
                
                response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
                response.raise_for_status()
                
                await message.answer("‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                await state.clear()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                message_text, keyboard = await get_appointment_info(appointment_id)
                await message.answer(message_text, reply_markup=keyboard)
                
        elif field == "time":
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                time_obj = datetime.strptime(message.text.strip(), "%H:%M")
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/appointments/{appointment_id}")
                response.raise_for_status()
                appointment = response.json()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞—Ç—É
                current_datetime = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
                new_datetime = datetime.combine(current_datetime.date(), time_obj.time())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                update_data = {
                    "scheduled_time": new_datetime.isoformat()
                }
                
                response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
                response.raise_for_status()
                
                await message.answer("‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                await state.clear()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                message_text, keyboard = await get_appointment_info(appointment_id)
                await message.answer(message_text, reply_markup=keyboard)
                
        elif field == "status":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
            status = message.text.strip().lower()
            valid_statuses = ["pending", "confirmed", "completed", "cancelled"]
            
            if status not in valid_statuses:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: pending, confirmed, completed, cancelled")
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            async with httpx.AsyncClient() as client:
                update_data = {
                    "status": status
                }
                
                response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
                response.raise_for_status()
                
                await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                await state.clear()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                message_text, keyboard = await get_appointment_info(appointment_id)
                await message.answer(message_text, reply_markup=keyboard)
                
        elif field == "car_model":
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            async with httpx.AsyncClient() as client:
                update_data = {
                    "car_model": message.text.strip()
                }
                
                response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
                response.raise_for_status()
                
                await message.answer("‚úÖ –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                await state.clear()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
                message_text, keyboard = await get_appointment_info(appointment_id)
                await message.answer(message_text, reply_markup=keyboard)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {field}") 