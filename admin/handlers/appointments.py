from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
import httpx
import logging
from datetime import datetime

from aiogram.fsm.state import StatesGroup, State

from ..config import API_URL
from . import clients, services

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–µ–π
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–µ–π
class EditAppointmentState(StatesGroup):
    waiting_for_value = State()

class CreateAppointmentState(StatesGroup):
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_client = State()
    waiting_for_service = State()

class DeleteAppointmentState(StatesGroup):
    waiting_for_confirmation = State()

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–µ–π
class AppointmentCallback(CallbackData, prefix="appointment"):
    id: int
    action: str

class ViewClientCallback(CallbackData, prefix="view_client"):
    appointment_id: int

class SelectClientCallback(CallbackData, prefix="select_client"):
    id: int

class SelectServiceCallback(CallbackData, prefix="select_service"):
    id: int

class EditAppointmentCallback(CallbackData, prefix="appointment"):
    id: int
    field: str

class EditAppointmentKeyCallback(CallbackData, prefix="appointment"):
    id: int
    key: str

class ClientCallback(CallbackData, prefix="client"):
    id: int

class ServiceCallback(CallbackData, prefix="service"):
    id: int

@router.message(Command("appointments"))
async def command_appointments(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
    try:
        async with httpx.AsyncClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
            response = await client.get(f"{API_URL}/appointments")
            response.raise_for_status()
            appointments = response.json()
            
            if not appointments:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="create_appointment")]
                ])
                await message.answer("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", reply_markup=keyboard)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
            buttons = []
            for appointment in appointments:
                client_response = await client.get(f"{API_URL}/clients/{appointment['client_id']}")
                client = client_response.json()
                
                scheduled_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
                formatted_time = scheduled_time.strftime("%d.%m.%Y %H:%M")
                
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{client['name']} - {formatted_time}",
                        callback_data=AppointmentCallback(id=appointment['id'], action="view").pack()
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.extend([
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="create_appointment")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer("üìù –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π")

@router.callback_query(lambda c: c.data == "create_appointment")
async def process_create_appointment_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(CreateAppointmentState.waiting_for_date)
    await callback.answer()

@router.callback_query(lambda c: c.data == "delete_appointment")
async def process_delete_appointment_callback(callback: types.CallbackQuery):
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(f"{API_URL}/appointments")
            response.raise_for_status()
            appointments = response.json()

            if not appointments:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{a.get('date', '–ù–µ—Ç –¥–∞—Ç—ã')} {a.get('time', '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏')} ‚Äî {a.get('client_name', '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞')}",
                            callback_data=AppointmentCallback(id=a['id'], action="delete").pack()
                        )
                    ] for a in appointments
                ]
            )

            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
        except httpx.RequestError as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: {str(e)}")
    
    await callback.answer()

@router.callback_query(AppointmentCallback.filter(F.action == "view"))
async def process_appointment_selection(callback: CallbackQuery, callback_data: AppointmentCallback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏"""
    try:
        appointment_id = callback_data.id
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ {appointment_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            response = await http_client.get(f"{API_URL}/appointments/{appointment_id}")
            response.raise_for_status()
            appointment = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {appointment}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_response = await http_client.get(f"{API_URL}/clients/{appointment['client_id']}")
            client_response.raise_for_status()
            client_data = client_response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–ª–∏–µ–Ω—Ç: {client_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            try:
                service_response = await http_client.get(f"{API_URL}/services/{appointment['service_id']}")
                service_response.raise_for_status()
                service = service_response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service}")
                service_info = f"üîß –£—Å–ª—É–≥–∞: {service['name']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']} —Ä—É–±.\n"
            except httpx.HTTPError:
                logger.warning(f"–£—Å–ª—É–≥–∞ —Å ID {appointment['service_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                service_info = "üîß –£—Å–ª—É–≥–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            scheduled_time = datetime.fromisoformat(appointment['scheduled_time'].replace('Z', '+00:00'))
            formatted_time = scheduled_time.strftime("%d.%m.%Y %H:%M")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = [
                [
                    InlineKeyboardButton(
                        text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
                        callback_data=AppointmentCallback(action="edit_date", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                        callback_data=AppointmentCallback(action="edit_time", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É",
                        callback_data=AppointmentCallback(action="edit_service", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=AppointmentCallback(action="edit_status", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞",
                        callback_data=ViewClientCallback(appointment_id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=AppointmentCallback(action="delete", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_appointments"),
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
            message = (
                f"üìù –ó–∞–ø–∏—Å—å #{appointment_id}\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_data['name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_data['phone_number']}\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {appointment.get('car_model', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"{service_info}"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_time}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get('status', 'pending')}\n"
            )
            
            await callback.message.edit_text(message, reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø–∏—Å–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏", show_alert=True)

@router.callback_query(AppointmentCallback.filter(F.action.in_(["edit_date", "edit_time", "edit_service", "edit_status", "delete"])))
async def process_edit_appointment(callback: types.CallbackQuery, callback_data: AppointmentCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    appointment_id = callback_data.id
    action = callback_data.action
    
    if action == "edit_service":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/services")
            response.raise_for_status()
            services = response.json()
            
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{service['name']} - {service['price']}‚ÇΩ",
                            callback_data=SelectServiceCallback(id=service['id']).pack()
                        )
                    ] for service in services
                ]
            )
            
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:", reply_markup=keyboard)
            await state.set_state(EditAppointmentState.waiting_for_value)
            await state.update_data(appointment_id=appointment_id, field="service")
    elif action == "edit_date":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="date")
    elif action == "edit_time":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        await state.set_state(EditAppointmentState.waiting_for_value)
        await state.update_data(appointment_id=appointment_id, field="time")
    elif action == "edit_status":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=status,
                        callback_data=AppointmentCallback(id=appointment_id, action=f"set_status_{status}").pack()
                    )
                ] for status in ["pending", "confirmed", "completed", "cancelled"]
            ]
        )
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)
    elif action == "delete":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=AppointmentCallback(id=appointment_id, action="confirm_delete").pack()
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
                        callback_data=AppointmentCallback(id=appointment_id, action="view").pack()
                    )
                ]
            ]
        )
        await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?", reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(SelectServiceCallback.filter(), EditAppointmentState.waiting_for_value)
async def process_service_selection(callback: types.CallbackQuery, callback_data: SelectServiceCallback, state: FSMContext):
    data = await state.get_data()
    appointment_id = data['appointment_id']
    service_id = callback_data.id
    
    try:
        async with httpx.AsyncClient() as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            service_response = await client.get(f"{API_URL}/services/{service_id}")
            service_response.raise_for_status()
            service = service_response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
            response = await client.get(f"{API_URL}/appointments/{appointment_id}")
            response.raise_for_status()
            appointment = response.json()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —É—Å–ª—É–≥–æ–π
            update_data = {
                "client_id": appointment['client_id'],
                "service_id": service_id,
                "scheduled_time": appointment['scheduled_time'],
                "status": appointment.get('status', 'pending'),
                "car_model": appointment.get('car_model', '')
            }
            
            response = await client.patch(f"{API_URL}/appointments/{appointment_id}", json=update_data)
            response.raise_for_status()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            response = await client.get(f"{API_URL}/appointments/{appointment_id}")
            response.raise_for_status()
            updated_appointment = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_response = await client.get(f"{API_URL}/clients/{updated_appointment['client_id']}")
            client_response.raise_for_status()
            client_data = client_response.json()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            scheduled_time = datetime.fromisoformat(updated_appointment['scheduled_time'].replace('Z', '+00:00'))
            formatted_time = scheduled_time.strftime("%d.%m.%Y %H:%M")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏
            message = (
                f"üìù –ó–∞–ø–∏—Å—å #{appointment_id}\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {client_data['name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {client_data['phone_number']}\n"
                f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {updated_appointment.get('car_model', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üîß –£—Å–ª—É–≥–∞: {service['name']}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']} —Ä—É–±.\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_time}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {updated_appointment.get('status', 'pending')}\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = [
                [
                    InlineKeyboardButton(
                        text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
                        callback_data=AppointmentCallback(action="edit_date", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è",
                        callback_data=AppointmentCallback(action="edit_time", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîß –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É",
                        callback_data=AppointmentCallback(action="edit_service", id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=AppointmentCallback(action="edit_status", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–∞",
                        callback_data=ViewClientCallback(appointment_id=appointment_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
                        callback_data=AppointmentCallback(action="delete", id=appointment_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_appointments"),
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(message, reply_markup=keyboard)
            await callback.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
            
    except httpx.HTTPError as e:
        if e.response and e.response.status_code == 404:
            await callback.message.edit_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {str(e)}")
    
    await state.clear()

@router.callback_query(ViewClientCallback.filter())
async def view_appointment_client(callback: CallbackQuery, callback_data: ViewClientCallback):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∑–∞–ø–∏—Å–∏"""
    try:
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
            response = await http_client.get(f"{API_URL}/appointments/{callback_data.appointment_id}")
            response.raise_for_status()
            appointment = response.json()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_response = await http_client.get(f"{API_URL}/clients/{appointment['client_id']}")
            client_response.raise_for_status()
            client = client_response.json()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
            message = (
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ\n\n"
                f"–ò–º—è: {client['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {client['phone_number']}\n"
                f"Telegram ID: {client.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–ø–∏—Å–∏",
                            callback_data=AppointmentCallback(id=callback_data.appointment_id, action="view").pack()
                        )
                    ],
                    [
                        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                    ]
                ]
            )
            
            await callback.message.edit_text(message, reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ", show_alert=True)

@router.callback_query(lambda c: c.data == "back_to_appointments")
async def back_to_appointments(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π"""
    await command_appointments(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "appointments")
async def appointments_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π"""
    await command_appointments(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "clients")
async def clients_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    await clients.command_clients(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "services")
async def services_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
    await services.command_services(callback.message)
    await callback.answer() 