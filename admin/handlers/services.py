from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
import httpx
import logging

from aiogram.fsm.state import StatesGroup, State

from ..config import API_URL

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É—Å–ª—É–≥
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å–ª—É–≥
class EditServiceState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()

class CreateServiceState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()

class DeleteServiceState(StatesGroup):
    waiting_for_confirmation = State()

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å–ª—É–≥
class ServiceCallback(CallbackData, prefix="service"):
    id: int
    action: str

class EditServiceCallback(CallbackData, prefix="service"):
    id: int
    field: str

@router.message(Command("services"))
async def command_services(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
    try:
        async with httpx.AsyncClient() as client:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            response = await client.get(f"{API_URL}/services")
            response.raise_for_status()
            services = response.json()
            
            if not services:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="create_service")]
                ])
                await message.answer("üîß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥", reply_markup=keyboard)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
            buttons = []
            for service in services:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"{service['name']} - {service['price']}‚ÇΩ",
                        callback_data=ServiceCallback(id=service['id'], action="view").pack()
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons.extend([
                [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="create_service")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer("üîß –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:", reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥")

@router.callback_query(lambda c: c.data == "create_service")
async def process_create_service_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(CreateServiceState.waiting_for_name)
    await callback.answer()

@router.callback_query(ServiceCallback.filter(F.action == "view"))
async def process_service_selection(callback: CallbackQuery, callback_data: ServiceCallback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    try:
        service_id = callback_data.id
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ {service_id}")
        
        async with httpx.AsyncClient() as http_client:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
            response = await http_client.get(f"{API_URL}/services/{service_id}")
            response.raise_for_status()
            service = response.json()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            buttons = [
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                        callback_data=ServiceCallback(action="edit_name", id=service_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                        callback_data=ServiceCallback(action="edit_description", id=service_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É",
                        callback_data=ServiceCallback(action="edit_price", id=service_id).pack()
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É",
                        callback_data=ServiceCallback(action="delete", id=service_id).pack()
                    )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_services"),
                    InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]
            ]
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–µ
            message = (
                f"üîß –£—Å–ª—É–≥–∞ #{service_id}\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {service['name']}\n"
                f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {service.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {service['price']} —Ä—É–±.\n"
            )
            
            await callback.message.edit_text(message, reply_markup=keyboard)
            await callback.answer()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —É—Å–ª—É–≥–∏: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ", show_alert=True)

@router.callback_query(ServiceCallback.filter(F.action.in_(["edit_name", "edit_description", "edit_price", "delete"])))
async def process_edit_service(callback: types.CallbackQuery, callback_data: ServiceCallback, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    service_id = callback_data.id
    action = callback_data.action
    
    if action == "delete":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{API_URL}/appointments")
            response.raise_for_status()
            appointments = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π
            service_appointments = [a for a in appointments if a['service_id'] == service_id]
            
            if service_appointments:
                await callback.message.answer(
                    "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.\n"
                    "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –∑–∞–ø–∏—Å–∏."
                )
                return
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_service_{service_id}"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
                ]
            ])
            await callback.message.answer(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É?",
                reply_markup=keyboard
            )
            await state.set_state(DeleteServiceState.waiting_for_confirmation)
            await state.update_data(service_id=service_id)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state_mapping = {
            "edit_name": (EditServiceState.waiting_for_name, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"),
            "edit_description": (EditServiceState.waiting_for_description, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"),
            "edit_price": (EditServiceState.waiting_for_price, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        }
        
        if action in state_mapping:
            state_class, message_text = state_mapping[action]
            await state.set_state(state_class)
            await state.update_data(service_id=service_id)
            await callback.message.answer(message_text)
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "back_to_services")
async def back_to_services(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥"""
    await command_services(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("confirm_delete_service_"))
async def confirm_delete_service(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    service_id = int(callback.data.split("_")[-1])
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.delete(f"{API_URL}/services/{service_id}")
            response.raise_for_status()
            
            await callback.message.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
            await command_services(callback.message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏")
    
    await callback.answer()

@router.message(EditServiceState.waiting_for_name)
async def process_edit_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    data = await state.get_data()
    service_id = data.get('service_id')
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.patch(
                f"{API_URL}/services/{service_id}",
                json={"name": message.text}
            )
            response.raise_for_status()
            
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
            await command_services(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏")

@router.message(EditServiceState.waiting_for_description)
async def process_edit_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    data = await state.get_data()
    service_id = data.get('service_id')
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.patch(
                f"{API_URL}/services/{service_id}",
                json={"description": message.text}
            )
            response.raise_for_status()
            
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
            await command_services(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏")

@router.message(EditServiceState.waiting_for_price)
async def process_edit_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏"""
    try:
        price = float(message.text)
        data = await state.get_data()
        service_id = data.get('service_id')
        
        async with httpx.AsyncClient() as client:
            response = await client.patch(
                f"{API_URL}/services/{service_id}",
                json={"price": price}
            )
            response.raise_for_status()
            
            await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
            await command_services(message)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏")

@router.message(CreateServiceState.waiting_for_name)
async def process_create_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(CreateServiceState.waiting_for_description)

@router.message(CreateServiceState.waiting_for_description)
async def process_create_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(CreateServiceState.waiting_for_price)

@router.message(CreateServiceState.waiting_for_price)
async def process_create_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
    try:
        price = float(message.text)
        data = await state.get_data()
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/services",
                json={
                    "name": data['name'],
                    "description": data['description'],
                    "price": price
                }
            )
            response.raise_for_status()
            
            await message.answer("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            await state.clear()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
            await command_services(message)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏") 